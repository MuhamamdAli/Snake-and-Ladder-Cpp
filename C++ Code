#include <iostream>
#include <cstdlib>
#include <ctime>
#include <string>
using namespace std;
void board();
int check_progress();
int roll;
int computer_roll;
int input; //variable to hold the users input, any number to roll dice and 0 to quit game, although entering a not a number value ends  the game as well...
int progress; //holds the value for the progress
int player = 1;
int computer = 1;
int Random(int random)
{
	return (rand() % random) + 1;
}


int squares[99]; // for the 100 squares, computers right counts from 0

int main()
{
	string name;
	std::cout << "Enter your name" << endl;
	std::cin >> name;
	std::cout << "enter any key to continue except 0 to play the game: ";
	std::cin >> input;
	int snake1 = 1 + Random(100 - 1);
	int end_pos = Random(snake1 + 1);
	cout << "snake lies between " << snake1 << " to " << end_pos << endl;
	int snake2 = 1 + Random(100 - 1);
	if (snake2 == snake1 || snake2 == end_pos)
	{
		int snake2 = 1 + Random(100 - 1);
	}
	int end_pos1 = Random(snake2 + 1);
	if (end_pos1 == snake1 || end_pos1 == end_pos || end_pos1 == snake2)
	{
		int end_pos1 = Random(snake2 + 1);
	}
	cout << "snake lies between " << snake2 << " to " << end_pos1 << endl;
	int snake3 = 1 + Random(100 - 1);
	if (snake3 == snake2 || snake3 == snake1 || snake3 == end_pos || end_pos1 == end_pos1)
	{
		int snake3 = 1 + Random(100 - 1);
	}
	int end_pos3 = Random(snake3 + 1);
	if (end_pos3 == snake1 || end_pos3 == end_pos || end_pos3 == snake2 || end_pos3 == end_pos1 || end_pos3 == snake2)
	{
		int end_pos3 = Random(snake3 + 1);
	}
	cout << "snake lies between " << snake3 << " to" << end_pos3 << endl;
	int ladder1 = 1 + Random(100 - 1);
	if (ladder1 == snake2 || ladder1 == snake1 || ladder1 == snake3 || ladder1 == end_pos || ladder1 == end_pos1 || ladder1 == end_pos3)
	{
		int ladder1 = 1 + Random(100 - 1);
	}

	int end_pos4 = (ladder1 + 1) + Random(100 - (ladder1 + 1));
	if (end_pos4 == snake2 || end_pos4 == snake1 || end_pos4 == snake3 || end_pos4 == end_pos || end_pos4 == end_pos1 || end_pos4 == end_pos3 || end_pos4 == ladder1)
	{
		int end_pos4 = (ladder1 + 1) + Random(100 - (ladder1 + 1));
	}
	cout << "ladder lies between " << ladder1 << " to " << end_pos4 << endl;
	int ladder2 = 1 + Random(100 - 1);
	if (ladder2 == snake2 || ladder2 == snake1 || ladder2 == snake3 || ladder2 == ladder1 || ladder2 == end_pos || ladder2 == end_pos1 || ladder2 == end_pos3 || ladder2 == end_pos4)
	{
		int ladder2 = 1 + Random(100 - 1);
	}

	int end_pos5 = (ladder2 + 1) + Random(100 - (ladder2 + 1));
	if (end_pos5 == snake2 || end_pos5 == snake1 || end_pos5 == snake3 || end_pos5 == end_pos || end_pos5 == end_pos1 || end_pos5 == end_pos3 || end_pos5 == end_pos4 || end_pos5 == ladder1 || end_pos5 == ladder2)
	{
		int end_pos5 = (ladder2 + 1) + Random(100 - (ladder2 + 1));
	}
	cout << "ladder lies between " << ladder2 << " to " << end_pos5 << endl;
	int ladder3 = 1 + Random(100 - 1);
	if (ladder3 == snake2 || ladder3 == snake1 || ladder3 == snake3 || ladder3 == ladder1 || ladder3 == ladder2 || ladder3 == end_pos || ladder3 == end_pos1 || ladder3 == end_pos3 || ladder3 == end_pos4 || ladder3 == end_pos5)
	{
		int ladder3 = 1 + Random(100 - 1);
	}

	int end_pos6 = (ladder3 + 1) + Random(100 - (ladder3 + 1));
	if (end_pos6 == snake2 || end_pos6 == snake1 || end_pos6 == snake3 || end_pos6 == end_pos || end_pos6 == end_pos1 || end_pos6 == end_pos3 || end_pos6 == end_pos4 || end_pos6 == end_pos5 || end_pos6 == ladder1 || end_pos6 == ladder2 || end_pos6 == ladder3)
	{
		int end_pos6 = (ladder3 + 1) + Random(100 - (ladder3 + 1));
	}
	cout << "ladder lies between " << ladder3 << " to " << end_pos6 << endl;
	int ladder4 = 1 + Random(100 - 1);
	if (ladder4 == snake2 || ladder4 == snake1 || ladder4 == snake3 || ladder4 == ladder1 || ladder4 == ladder2 || ladder4 == ladder3 || ladder3 == end_pos || ladder3 == end_pos1 || ladder3 == end_pos3 || ladder3 == end_pos4 || ladder3 == end_pos5 || ladder3 == end_pos6)
	{
		int ladder4 = 1 + Random(100 - 1);
	}

	int end_pos7 = (ladder4 + 1) + Random(100 - (ladder4 + 1));
	if (end_pos7 == snake2 || end_pos7 == snake1 || end_pos7 == snake3 || end_pos7 == end_pos || end_pos7 == end_pos1 || end_pos7 == end_pos3 || end_pos7 == end_pos4 || end_pos7 == end_pos5 || end_pos7 == end_pos6 || end_pos7 == ladder1 || end_pos7 == ladder2 || end_pos7 == ladder3)
	{
		int end_pos7 = (ladder4 + 1) + Random(100 - (ladder4 + 1));
	}
	cout << "ladder lies between " << ladder4 << " to " << end_pos7 << endl;
	srand(time(NULL)); //we need random numbers remeber?

	string alert = ""; //to alert you for your triumphs and misfortunes
	string computer_alert = ""; // to alert you for computer's triumphs and misfortunes

	std::cout << "Welcome to snakes and ladders, enter any number to roll dice, press 0 to quit\n\n";

	for (int i = 1; i <= 100; i++) // this loop just makes it possible for us to give our squares values
	{
		squares[i] = i;
	}

	do // every game is in some sort of loop
	{
		std::cin.get();
		roll = Random(6);//player rolls dice
		if (roll == 6)
		{
			std::cout << name << " rolls the die: " << roll << endl;
			std::cout << name << " got 6" << name << ". have another turn" << endl;
			int score = 6;
			std::cout << "enter any key to continue except 0 to play the game: ";
			roll = Random(6);
			std::cin.get();
			std::cout << name << " rolls the die: " << roll << endl;
			if (roll == 6)
			{
				std::cout << name << "  rolls the die: " << name << endl;
				std::cout << name << " got 6" << name << " have another turn" << endl;
				int score = 6;
				std::cout << "enter any key to continue except 0 to play the game: ";
				roll = Random(6);
				std::cin.get();
				std::cout << name << " rolls the die: " << roll << endl;
				if (roll == 6)
				{
					std::cout << player << " rolls the die: " << roll << endl;
					std::cout << "You have three consecutive sixes,you get nothing" << endl;
					int score = -18;
					roll = roll + score;
				}
				roll = roll + score;
			}
			roll = roll + score;
		}

		if ((roll + player) > 100)
		{
			player = player; //player has rolled a number that exceeds the end point player remains where they are
		}
		else
		{
			squares[player] = player;//overwrite the current position
			player = player + roll;//move player to a new position
		}
		std::cin.get();
		computer_roll = Random(6); //computer rolls dice
		if (computer_roll == 6)
		{
			std::cout << "Computer rolls the die: " << computer_roll << endl;
			std::cout << "Computer got 6 ,Computer have another turn" << endl;
			int score = 6;
			computer_roll = Random(6);
			std::cout << "Computer rolls the die: " << computer_roll << endl;
			if (computer_roll == 6)
			{
				std::cout << "Computer rolls the die: " << computer_roll << endl;
				std::cout << "Computer got 6 ,Computer have another turn" << endl;
				int score = 6;
				computer_roll = Random(6);
				std::cout << "Computer rolls the die: " << computer_roll << endl;
				if (computer_roll == 6)
				{
					std::cout << "Computer rolls the die: " << computer_roll << endl;
					std::cout << "Computer have three consecutive sixes,Computer get nothing" << endl;
					int   score = -18;
					computer_roll = computer_roll + score;
				}
				computer_roll = computer_roll + score;
			}
			computer_roll = computer_roll + score;
		}


		if ((computer_roll + computer) > 100)
		{
			computer = computer; //computer has rolled a number that exceeds the end point, computer remains where it is
		}
		else
		{
			squares[computer] = computer;//overwrite the current position
			computer = computer + computer_roll;//move computer to a new position
		}
		if (player == snake1)
		{
			player = end_pos;
			cout << "Snake eat you" << endl;
		}
		else if (computer == snake1)
		{
			computer = end_pos;
			cout << "Snake eats computer" << endl;
		}
		else if (player == snake2)
		{
			player = end_pos1;
			cout << "Snake eat you" << endl;
		}
		else if (computer == snake2)
		{
			computer = end_pos1;
			cout << "Snake eats computer" << endl;
		}
		else if (player == snake3)
		{
			player = end_pos3;
			cout << "Snake eat you" << endl;
		}
		else if (computer == snake3)
		{
			computer = end_pos3;
			cout << "Snake eats computer" << endl;
		}
		else if (player == ladder1)
		{
			player = end_pos4;
			cout << "Congratulation!You get ladder" << endl;
		}
		else if (computer == ladder1)
		{
			computer = end_pos4;
			cout << "computer get ladder" << endl;
		}
		else if (player == ladder2)
		{
			player = end_pos5;
			cout << "Congratulation!You get ladder" << endl;
		}
		else if (computer == ladder2)
		{
			computer = end_pos5;
			cout << "computer get ladder" << endl;
		}
		else if (player == ladder3)
		{
			player = end_pos6;
			cout << "Congratulation!You get ladder" << endl;
		}
		else if (computer == ladder3)
		{
			computer = end_pos6;
			cout << "computer get ladder" << endl;
		}
		else if (player == ladder4)
		{
			player = end_pos7;
			cout << "Congratulation!You get ladder" << endl;
		}
		else if (computer == ladder4)
		{
			computer = end_pos7;
			cout << "computer get ladder" << endl;
		}

		std::cout << "The position of player is represented by 1111 while position of computer is represented by 111 " << endl;
		squares[player] = 1111; //player's position shall be represented by the integer 1111
		squares[computer] = 111; //computer's position shall be represented by the inteer 111

		if (input != 0)
		{
			std::cout << "You rolled " << roll<<endl << " Computer rolled " << computer_roll << endl;
			std::cout << "Your Position: " << player << endl;
			std::cout << " Computer's Position: " << computer << endl;
			std::cout << alert << endl;
			std::cout << computer_alert << endl;
			board();
		}

		progress = check_progress();

	} 
	while (progress == 0 && input != 0);

	if (squares[100] == 1111)
	{
		std::cout << "||You Win!||" << endl;
	}
	else if (squares[100] == 111)
	{
		std::cout << "||Game Over Computer Wins!" << endl;
	}
	else
	{
		std::cout << "You Quit!";
	}

	std::cin.get();
	std::cin.ignore();
}

void board()//define the board drawing mechanism!
{
	std::cout << "----------------------------------------------------------------------------" << endl << endl;
	std::cout << squares[100] << "\t" << squares[99] << "\t" << squares[98] << "\t" << squares[97] << "\t" << squares[96] << "\t"
		<< squares[95] << "\t" << squares[94] << "\t" << squares[93] << "\t" << squares[92] << "\t" << squares[91] << endl << endl;

	std::cout << squares[81] << "\t" << squares[82] << "\t" << squares[83] << "\t" << squares[84] << "\t" << squares[85] << "\t"
		<< squares[86] << "\t" << squares[87] << "\t" << squares[88] << "\t" << squares[89] << "\t" << squares[90] << endl << endl;

	std::cout << squares[80] << "\t" << squares[79] << "\t" << squares[78] << "\t" << squares[77] << "\t" << squares[76] << "\t"
		<< squares[75] << "\t" << squares[74] << "\t" << squares[73] << "\t" << squares[72] << "\t" << squares[71] << endl << endl;

	std::cout << squares[61] << "\t" << squares[62] << "\t" << squares[63] << "\t" << squares[64] << "\t" << squares[65] << "\t"
		<< squares[66] << "\t" << squares[67] << "\t" << squares[68] << "\t" << squares[69] << "\t" << squares[70] << endl << endl;

	std::cout << squares[60] << "\t" << squares[59] << "\t" << squares[58] << "\t" << squares[57] << "\t" << squares[56] << "\t"
		<< squares[55] << "\t" << squares[54] << "\t" << squares[53] << "\t" << squares[52] << "\t" << squares[51] << endl << endl;

	std::cout << squares[41] << "\t" << squares[42] << "\t" << squares[43] << "\t" << squares[44] << "\t" << squares[45] << "\t"
		<< squares[46] << "\t" << squares[47] << "\t" << squares[48] << "\t" << squares[49] << "\t" << squares[50] << endl << endl;

	std::cout << squares[40] << "\t" << squares[39] << "\t" << squares[38] << "\t" << squares[37] << "\t" << squares[36] << "\t"
		<< squares[35] << "\t" << squares[34] << "\t" << squares[33] << "\t" << squares[32] << "\t" << squares[31] << endl << endl;

	std::cout << squares[21] << "\t" << squares[22] << "\t" << squares[23] << "\t" << squares[24] << "\t" << squares[25] << "\t"
		<< squares[26] << "\t" << squares[27] << "\t" << squares[28] << "\t" << squares[29] << "\t" << squares[30] << endl << endl;

	std::cout << squares[20] << "\t" << squares[19] << "\t" << squares[18] << "\t" << squares[17] << "\t" << squares[16] << "\t"
		<< squares[15] << "\t" << squares[14] << "\t" << squares[13] << "\t" << squares[12] << "\t" << squares[11] << endl << endl;

	std::cout << squares[1] << "\t" << squares[2] << "\t" << squares[3] << "\t" << squares[4] << "\t" << squares[5] << "\t"
		<< squares[6] << "\t" << squares[7] << "\t" << squares[8] << "\t" << squares[9] << "\t" << squares[10] << endl << endl;
	std::cout << "----------------------------------------------------------------------------" << endl;
}

int check_progress()//define the progress checking mechanism
{
	if (squares[100] == 1111 || squares[100] == 111)
	{
		return 1;//game has ended... win! someone has
	}
	else
	{
		return 0;//game is still on, win no one has...
	}
}


